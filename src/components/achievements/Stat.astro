---
import { objSum } from "../../util/objSum";

type HeadingLevels = "1" | "2" | "3" | "4" | "5" | "6";

export interface Props {
  contributor: Record<
    "merged_pulls" | "issues" | "reviews",
    Record<string, number>
  >;
  count: string;
  type: "pulls" | "issues" | "reviews";
  hLevel: HeadingLevels;
}

const { contributor, count, hLevel, type } = Astro.props;
const H: `h${HeadingLevels}` = `h${hLevel}`;
const stat = contributor[type === "pulls" ? "merged_pulls" : type];
const maxCount = Math.max(...Object.values(stat));
const repoCounts = Object.entries(stat).sort(([, a], [, b]) => b - a);
---

<li class="text-center p-6 bg-neutral-900 border border-neutral-800 flex flex-col gap-6">
  <div>
    <H class="heading-5 text-white">{type[0].toUpperCase() + type.slice(1)}</H>
    <p class="text-[2rem] text-white font-obviously-wide font-semibold">{count}</p>
  </div>
  <ul class="text-[13px] text-white leading-tight">
    {
      repoCounts.map(([repo, repoCount]) => {
        const percentage = (repoCount / maxCount) * 100;
        return (
          <li class="grid grid-cols-2 items-center rounded hover:bg-neutral-50/10">
            <span
              class="text-right py-0.5 pr-2 border-r border-neutral-500 break-words"
            >
              {repo}
            </span>
            <span
              class="pl-2"
            >
              <span
                class="block w-[var(--bar-w)] min-w-[2px] bg-blue-purple-gradient h-2 rounded-full"
                style={`--bar-w: ${percentage}%;`}
              >
                <span class="sr-only">{repoCount} {type}</span>
              </span>
            </span>
          </li>
        );
      })
    }
  </ul>
</li>
