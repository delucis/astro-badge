---
import { Code } from 'astro/components';
import Copy from '../components/Copy.astro';
import Layout from '../layouts/Layout.astro';
import { badgeSizes } from './v2/built-with-astro/_data';
import Frame from '../components/Frame.astro';
const title = 'Badges';
const description =
  '“Built with Astro” SVG badges to add to your sites and GitHub READMEs!';

const mdSnippet = ({ slug }: typeof badgeSizes[number]) => `[![Built with Astro](${Astro.site}v2/built-with-astro/${slug}.svg)](https://astro.build)`;
const htmlSnippet = ({ slug, width, height }: typeof badgeSizes[number]) => `<a href="https://astro.build">
  <img src="${Astro.site}v2/built-with-astro/${slug}.svg" alt="Built with Astro" width="${width}" height="${height}">
</a>`;
---

<Layout {title} {description}>
  <div class="mx-auto flex flex-col gap-6">
    <div class="flex flex-col gap-4">
      <h1 class="heading-3 text-white">Built with Astro</h1>
      <p>
        Add a badge to your repository or website and show off your Astro pride!
      </p>
    </div>

    <starlight-tabs>
      <Frame>
        <!-- tabs -->
        <ul role="tablist" class="sm:self-start border border-neutral-300 rounded-full flex text-xs sm:text-sm text-center">
          {badgeSizes.map(({ label, shortLabel, slug }, idx) => (
            <li role="presentation" class="grow flex">
              <a role="tab" class="w-full px-3 py-2 sm:px-12 sm:py-2.5 aria-selected:text-white aria-selected:bg-blue-purple-gradient rounded-full" href={`#${slug}`} aria-selected={idx === 0 ? 'true': 'false'} tabindex={idx !== 0 ? -1 : 0}>
								<span class="xs:hidden">{shortLabel}</span>
								<span class="hidden xs:inline">{label}</span>
							</a>
            </li>
          ))}
        </ul>
        {badgeSizes.map((badge, idx) => (
          <!-- panel -->
        <section role="tabpanel" hidden={idx !== 0} class="flex-col gap-4 sm:gap-8 [&:not([hidden])]:flex">
          <h2 class="sr-only" id={badge.slug}>{badge.label}</h2>
          <!-- preview well -->
          <div
            class="relative text-center pt-28 pb-4 rounded-lg border border-neutral-500 bg-neutral-600"
          >
            <div class="absolute inset-0 grid place-content-center">
              <img class="shadow-md" src={`/v2/built-with-astro/${badge.slug}.svg`} width={badge.width} height={badge.height} alt="Built with Astro" />
            </div>
            <p class="font-mono text-xs">Badge preview — {badge.width}×{badge.height}</p>
          </div>
          <!-- code snippets to copy/paste -->
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-8">
            <div class="flex flex-col gap-4 [&>:last-child]:grow">
              <div class="flex items-baseline justify-between">
                <h3 class="heading-5 text-white">Markdown</h3>
                <Copy text={mdSnippet(badge)} />
              </div>
              <Code code={mdSnippet(badge)} lang="md" />
            </div>
            <div class="flex flex-col gap-4">
              <div class="flex items-baseline justify-between">
                <h3 class="heading-5 text-white">HTML</h3>
                <Copy text={htmlSnippet(badge)} />
              </div>
              <Code code={htmlSnippet(badge)} lang="html" />
            </div>
          </div>
        </section>
        ))}
      </Frame>
    </starlight-tabs>
  </div>
</Layout>

<script>
	class StarlightTabs extends HTMLElement {
		tabs: HTMLAnchorElement[];
		panels: HTMLElement[];

		constructor() {
			super();
			const tablist = this.querySelector<HTMLUListElement>('[role="tablist"]')!;
			this.tabs = [...tablist.querySelectorAll<HTMLAnchorElement>('[role="tab"]')];
			this.panels = [...this.querySelectorAll<HTMLElement>('[role="tabpanel"]')];

        console.log(this.panels);

			this.tabs.forEach((tab, i) => {
				// Handle clicks for mouse users
				tab.addEventListener('click', (e) => {
					e.preventDefault();
					const currentTab = tablist.querySelector('[aria-selected]');
					if (e.currentTarget !== currentTab) {
						this.switchTab(e.currentTarget as HTMLAnchorElement, i);
					}
				});

				// Handle keyboard input
				tab.addEventListener('keydown', (e) => {
					const index = this.tabs.indexOf(e.currentTarget as any);
					// Work out which key the user is pressing and
					// Calculate the new tab's index where appropriate
					const nextIndex =
						e.key === 'ArrowLeft'
							? index - 1
							: e.key === 'ArrowRight'
							? index + 1
							: e.key === 'Home'
							? 0
							: e.key === 'End'
							? this.tabs.length - 1
							: null;
					if (nextIndex === null) return;
					if (this.tabs[nextIndex]) {
						e.preventDefault();
						this.switchTab(this.tabs[nextIndex], nextIndex);
					}
				});
			});
		}

		switchTab(newTab: HTMLAnchorElement | null | undefined, index: number) {
			if (!newTab) return;

			// Mark all tabs as unselected and hide all tab panels.
			this.tabs.forEach((tab) => {
				tab.removeAttribute('aria-selected');
				tab.setAttribute('tabindex', '-1');
			});
			this.panels.forEach((oldPanel) => {
				oldPanel.hidden = true;
			});

			// Show new panel and mark new tab as selected.
			const newPanel = this.panels[index];
			if (newPanel) newPanel.hidden = false;
			// Restore active tab to the default tab order.
			newTab.removeAttribute('tabindex');
			newTab.setAttribute('aria-selected', 'true');
			newTab.focus();
		}
	}

	customElements.define('starlight-tabs', StarlightTabs);
</script>